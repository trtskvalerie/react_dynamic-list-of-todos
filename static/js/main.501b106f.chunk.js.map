{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","setSelectedUserId","selectedTodoId","setSelectedTodoId","useState","query","setQuery","selectValue","setSelectValue","visibleTodos","setVisibleTodos","useEffect","filter","todo","title","includes","toLowerCase","completed","className","type","value","placeholder","onChange","event","target","onClick","sort","Math","random","map","classNames","htmlFor","id","checked","readOnly","userId","request","endpoint","a","fetch","responce","json","CurrentUser","selectedUserId","user","setUser","fetchUser","name","email","phone","App","setTodos","fetchTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.501b106f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  setSelectedUserId: (userId: number) => void,\n  selectedTodoId: number,\n  setSelectedTodoId: (todoId: number) => void,\n};\n\nfunction shuffleArr(arr: Todo[]) {\n  return arr.sort(() => Math.random() - 0.5);\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setSelectedUserId,\n  selectedTodoId,\n  setSelectedTodoId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      if (!todo.title.includes(query.toLowerCase())) {\n        return false;\n      }\n\n      switch (selectValue) {\n        case 'all':\n          return true;\n\n        case 'active':\n          return !todo.completed;\n\n        case 'completed':\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    }));\n  }, [todos, query, selectValue]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        value={query}\n        placeholder=\"Search by title\"\n        onChange={event => setQuery(event.target.value)}\n      />\n\n      <select\n        value={selectValue}\n        onChange={(event) => setSelectValue(event.target.value)}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n\n      <button\n        type=\"button\"\n        onClick={() => setVisibleTodos(shuffleArr([...visibleTodos]))}\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n            >\n              <label htmlFor={`todo${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`todo${todo.id}`}\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': todo.id === selectedTodoId },\n                )}\n                type=\"button\"\n                onClick={() => {\n                  setSelectedTodoId(todo.id);\n                  setSelectedUserId(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (endpoint: string) => {\n  try {\n    const responce = await fetch(`${BASE_URL}${endpoint}`);\n\n    return await responce.json();\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const getTodos = (): Promise<Todo[]> => request('/todos');\n\nexport const getUser = (userId: number): Promise<User> => request(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number,\n  setSelectedUserId: (userId: number) => void,\n  setSelectedTodoId: (todoId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = React.memo(({\n  selectedUserId,\n  setSelectedUserId,\n  setSelectedTodoId,\n}) => {\n  const [user, setUser] = useState<User>();\n\n  const fetchUser = async () => {\n    setUser(await getUser(selectedUserId));\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, [selectedUserId]);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${selectedUserId}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear button\"\n            onClick={() => {\n              setSelectedUserId(0);\n              setSelectedTodoId(0);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      ) : (\n        <p>User not found</p>\n      )}\n    </>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const fetchTodos = async () => {\n    setTodos(await getTodos());\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList {...{\n          todos,\n          setSelectedUserId,\n          selectedTodoId,\n          setSelectedTodoId,\n        }}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser {...{\n              selectedUserId,\n              setSelectedUserId,\n              setSelectedTodoId,\n            }}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}